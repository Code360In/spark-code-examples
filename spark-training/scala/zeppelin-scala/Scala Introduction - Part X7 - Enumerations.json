{"paragraphs":[{"text":"%md\n# Enumerations\n\nScala doesn't directly support enumerations like Java or C/C++. But since this is an important feature with many use cases, let's discuss some different approaches with a final recommendation","user":"anonymous","dateUpdated":"2018-11-12T18:27:16+0000","config":{"colWidth":12,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true,"editorMode":"ace/mode/markdown","editorHide":true,"tableHide":false},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1542046579286_1862310438","id":"20181112-181619_1068487694","result":{"code":"SUCCESS","type":"HTML","msg":"<div class=\"markdown-body\">\n<h1>Enumerations</h1>\n<p>Scala doesn&rsquo;t directly support enumerations like Java or C/C++. But since this is an important feature with many use cases, let&rsquo;s discuss some different approaches with a final recommendation</p>\n</div>"},"dateCreated":"2018-11-12T18:16:19+0000","dateStarted":"2018-11-12T18:27:16+0000","dateFinished":"2018-11-12T18:27:16+0000","status":"FINISHED","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:36897"},{"text":"%md\n# 1 Simple Apprpoach\n\nThe first idea could be to create an enumeration using the Java base class `Enumeration`. This could look as follows:","user":"anonymous","dateUpdated":"2018-11-12T18:27:56+0000","config":{"colWidth":12,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true,"editorMode":"ace/mode/markdown","editorHide":true,"tableHide":false},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1542047240012_302656057","id":"20181112-182720_2090272795","result":{"code":"SUCCESS","type":"HTML","msg":"<div class=\"markdown-body\">\n<h1>1 Simple Apprpoach</h1>\n<p>The first idea could be to create an enumeration using the Java base class <code>Enumeration</code>. This could look as follows:</p>\n</div>"},"dateCreated":"2018-11-12T18:27:20+0000","dateStarted":"2018-11-12T18:27:56+0000","dateFinished":"2018-11-12T18:27:56+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:36898"},{"text":"object Colours extends Enumeration {\n  val Red, Amber, Green = Value\n}","user":"anonymous","dateUpdated":"2018-11-12T18:28:00+0000","config":{"colWidth":12,"editorMode":"ace/mode/scala","results":{},"enabled":true,"editorSetting":{"language":"scala","editOnDblClick":false},"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1542046560154_2071983264","id":"20180327-183919_1965754391","result":{"code":"SUCCESS","type":"TEXT","msg":"\ndefined object Colours\n"},"dateCreated":"2018-11-12T18:16:00+0000","dateStarted":"2018-11-12T18:28:00+0000","dateFinished":"2018-11-12T18:28:00+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:36899"},{"text":"%md\nYou can then access individual values easily:","user":"anonymous","dateUpdated":"2018-11-12T18:28:20+0000","config":{"colWidth":12,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true,"editorMode":"ace/mode/markdown","editorHide":true,"tableHide":false},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1542047287428_-1969024043","id":"20181112-182807_627687019","result":{"code":"SUCCESS","type":"HTML","msg":"<div class=\"markdown-body\">\n<p>You can then access individual values easily:</p>\n</div>"},"dateCreated":"2018-11-12T18:28:07+0000","dateStarted":"2018-11-12T18:28:20+0000","dateFinished":"2018-11-12T18:28:20+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:36900"},{"text":"Colours.Red","user":"anonymous","dateUpdated":"2018-11-12T18:28:23+0000","config":{"colWidth":12,"editorMode":"ace/mode/scala","results":{},"enabled":true,"editorSetting":{"language":"scala","editOnDblClick":false},"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1542046560155_2071598516","id":"20180327-183932_2040167383","result":{"code":"SUCCESS","type":"TEXT","msg":"\nres11: Colours.Value = Red\n"},"dateCreated":"2018-11-12T18:16:00+0000","dateStarted":"2018-11-12T18:28:23+0000","dateFinished":"2018-11-12T18:28:23+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:36901"},{"text":"def traffic(colour: Colours.Value) = colour match {\n case Colours.Red => \"Stop\"\n case Colours.Green => \"Go\"\n}","user":"anonymous","dateUpdated":"2018-11-12T18:33:27+0000","config":{"colWidth":12,"editorMode":"ace/mode/scala","results":{},"enabled":true,"editorSetting":{"language":"scala","editOnDblClick":false},"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1542046560157_2069290022","id":"20180327-184020_1883614987","result":{"code":"SUCCESS","type":"TEXT","msg":"\ntraffic: (colour: Colours.Value)String\n"},"dateCreated":"2018-11-12T18:16:00+0000","dateStarted":"2018-11-12T18:33:27+0000","dateFinished":"2018-11-12T18:33:27+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:36902"},{"text":"%md\n## 1.1 What's the Problem?\n\nBut this doesn't work very well as almost no type safety is provided. Let us define a second enumeration called `WeekDays` and create some overloaded methods for both enumerations.","user":"anonymous","dateUpdated":"2018-11-12T18:29:25+0000","config":{"tableHide":false,"editorSetting":{"language":"markdown","editOnDblClick":true},"colWidth":12,"editorMode":"ace/mode/markdown","editorHide":true,"results":{},"enabled":true,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1542046560155_2071598516","id":"20180327-184004_144399286","result":{"code":"SUCCESS","type":"HTML","msg":"<div class=\"markdown-body\">\n<h2>1.1 What&rsquo;s the Problem?</h2>\n<p>But this doesn&rsquo;t work very well as almost no type safety is provided. Let us define a second enumeration called <code>WeekDays</code> and create some overloaded methods for both enumerations.</p>\n</div>"},"dateCreated":"2018-11-12T18:16:00+0000","dateStarted":"2018-11-12T18:29:25+0000","dateFinished":"2018-11-12T18:29:25+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:36903"},{"text":"object WeekDays extends Enumeration {\n  val Mon,Tue,Wed,Thu,Fri = Value\n}","user":"anonymous","dateUpdated":"2018-11-12T18:29:28+0000","config":{"colWidth":12,"editorMode":"ace/mode/scala","results":{},"enabled":true,"editorSetting":{"language":"scala","editOnDblClick":false},"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1542046560156_2069674771","id":"20180327-183943_1687715380","result":{"code":"SUCCESS","type":"TEXT","msg":"\ndefined object WeekDays\n"},"dateCreated":"2018-11-12T18:16:00+0000","dateStarted":"2018-11-12T18:29:28+0000","dateFinished":"2018-11-12T18:29:28+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:36904"},{"text":"%md\n### Overloading Methods\nNow let us try to define an overloaded function that works both with colours and with week days.","user":"anonymous","dateUpdated":"2018-11-12T18:31:48+0000","config":{"colWidth":12,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true,"editorMode":"ace/mode/markdown","editorHide":true,"tableHide":false},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1542047485498_-418598702","id":"20181112-183125_702400273","result":{"code":"SUCCESS","type":"HTML","msg":"<div class=\"markdown-body\">\n<h3>Overloading Methods</h3>\n<p>Now let us try to define an overloaded function that works both with colours and with week days.</p>\n</div>"},"dateCreated":"2018-11-12T18:31:25+0000","dateStarted":"2018-11-12T18:31:48+0000","dateFinished":"2018-11-12T18:31:48+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:36905"},{"text":"object Functions {\n  def f(x: Colours.Value)  = \"That's a colour\"\n  def f(x: WeekDays.Value) = \"That's a weekday\"\n}","user":"anonymous","dateUpdated":"2018-11-12T18:29:51+0000","config":{"colWidth":12,"editorMode":"ace/mode/scala","results":{},"enabled":true,"editorSetting":{"language":"scala","editOnDblClick":false},"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1542046560156_2069674771","id":"20180327-184015_148299054","result":{"code":"ERROR","type":"TEXT","msg":"\n\n\n\n\n\n<console>:31: error: double definition:\ndef f(x: Colours.Value): String at line 30 and\ndef f(x: WeekDays.Value): String at line 31\nhave same type after erasure: (x: Enumeration#Value)String\n         def f(x: WeekDays.Value) = \"That's a weekday\"\n             ^\n"},"dateCreated":"2018-11-12T18:16:00+0000","dateStarted":"2018-11-12T18:29:51+0000","dateFinished":"2018-11-12T18:29:51+0000","status":"ERROR","progressUpdateIntervalMs":500,"$$hashKey":"object:36906"},{"text":"%md\nThe problem with the example above is that all different enumeration values actually share the same type `Value`. Therefore there is no type safety in overloading methods. Or the other way round that means that a method accepting colours would also accept week days without the compiler mocking about.","user":"anonymous","dateUpdated":"2018-11-12T18:32:21+0000","config":{"colWidth":12,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true,"editorMode":"ace/mode/markdown","editorHide":true,"tableHide":false},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1542047418320_-513924484","id":"20181112-183018_1450286919","result":{"code":"SUCCESS","type":"HTML","msg":"<div class=\"markdown-body\">\n<p>The problem with the example above is that all different enumeration values actually share the same type <code>Value</code>. Therefore there is no type safety in overloading methods. Or the other way round that means that a method accepting colours would also accept week days without the compiler mocking about.</p>\n</div>"},"dateCreated":"2018-11-12T18:30:18+0000","dateStarted":"2018-11-12T18:32:21+0000","dateFinished":"2018-11-12T18:32:21+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:36907"},{"text":"%md\n### Type matching\nYou even cannot use Scala pattern matching to define different control flows for different values","user":"anonymous","dateUpdated":"2018-11-12T18:34:03+0000","config":{"colWidth":12,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true,"editorMode":"ace/mode/markdown","editorHide":true,"tableHide":false},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1542047482442_-831049523","id":"20181112-183122_1158823886","result":{"code":"SUCCESS","type":"HTML","msg":"<div class=\"markdown-body\">\n<h3>Type matching</h3>\n<p>You even cannot use Scala pattern matching to define different control flows for different values</p>\n</div>"},"dateCreated":"2018-11-12T18:31:22+0000","dateStarted":"2018-11-12T18:34:03+0000","dateFinished":"2018-11-12T18:34:03+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:36908"},{"text":"traffic(Colours.Red)","user":"anonymous","dateUpdated":"2018-11-12T18:33:32+0000","config":{"colWidth":12,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true,"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1542047598165_-319532700","id":"20181112-183318_523664350","result":{"code":"ERROR","type":"TEXT","msg":"\n\n\n\n\n<console>:30: error: type mismatch;\n found   : Colours.Value\n required: Colours.Value\n       traffic(Colours.Red)\n                       ^\n"},"dateCreated":"2018-11-12T18:33:18+0000","dateStarted":"2018-11-12T18:33:32+0000","dateFinished":"2018-11-12T18:33:32+0000","status":"ERROR","progressUpdateIntervalMs":500,"$$hashKey":"object:36909"},{"text":"%md\n# 2 Scala Alternative: Sealed case objects\n\nThe best alternative to using Java enumerations is to use Scala sealed classes together with case objects as in the following example:","user":"anonymous","dateUpdated":"2018-11-12T18:35:16+0000","config":{"tableHide":false,"editorSetting":{"language":"markdown","editOnDblClick":true},"colWidth":12,"editorMode":"ace/mode/markdown","editorHide":true,"results":{},"enabled":true,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1542046560157_2069290022","id":"20180327-184108_1755617218","result":{"code":"SUCCESS","type":"HTML","msg":"<div class=\"markdown-body\">\n<h1>2 Scala Alternative: Sealed case objects</h1>\n<p>The best alternative to using Java enumerations is to use Scala sealed classes together with case objects as in the following example:</p>\n</div>"},"dateCreated":"2018-11-12T18:16:00+0000","dateStarted":"2018-11-12T18:35:16+0000","dateFinished":"2018-11-12T18:35:16+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:36910"},{"text":"sealed abstract class WeekDay()\n\nobject WeekDays {\n  case object Mon extends WeekDay\n  case object Tue extends WeekDay\n  case object Wed extends WeekDay\n  case object Thu extends WeekDay\n  case object Fri extends WeekDay\n  case object Sat extends WeekDay\n  case object Sun extends WeekDay\n}\n\n  case object Mon extends WeekDay\n  case object Tue extends WeekDay\n  case object Wed extends WeekDay\n  case object Thu extends WeekDay\n  case object Fri extends WeekDay\n  case object Sat extends WeekDay\n  case object Sun extends WeekDay\n","user":"anonymous","dateUpdated":"2018-11-12T19:09:43+0000","config":{"colWidth":12,"editorMode":"ace/mode/scala","results":{},"enabled":true,"editorSetting":{"language":"scala","editOnDblClick":false},"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1542046560158_2070444269","id":"20180327-184128_493975143","result":{"code":"SUCCESS","type":"TEXT","msg":"\n\ndefined class WeekDay\ndefined object WeekDays\n\ndefined object Mon\n\ndefined object Tue\n\ndefined object Wed\n\ndefined object Thu\n\ndefined object Fri\n\ndefined object Sat\n\ndefined object Sun\n"},"dateCreated":"2018-11-12T18:16:00+0000","dateStarted":"2018-11-12T19:09:43+0000","dateFinished":"2018-11-12T19:09:44+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:36911"},{"text":"WeekDays.Mon","user":"anonymous","dateUpdated":"2018-11-12T18:59:50+0000","config":{"colWidth":12,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true,"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1542047983816_-1972895602","id":"20181112-183943_1977983464","result":{"code":"SUCCESS","type":"TEXT","msg":"\nres0: WeekDays.Mon.type = Mon\n"},"dateCreated":"2018-11-12T18:39:43+0000","dateStarted":"2018-11-12T18:59:50+0000","dateFinished":"2018-11-12T18:59:59+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:36912"},{"text":"%md\n### Pattern Matching\nNow you can easily write a function using pattern matching","user":"anonymous","dateUpdated":"2018-11-12T18:35:53+0000","config":{"colWidth":12,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true,"editorMode":"ace/mode/markdown","editorHide":true,"tableHide":false},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1542047733396_365087191","id":"20181112-183533_264985583","result":{"code":"SUCCESS","type":"HTML","msg":"<div class=\"markdown-body\">\n<h3>Pattern Matching</h3>\n<p>Now you can easily write a function using pattern matching</p>\n</div>"},"dateCreated":"2018-11-12T18:35:33+0000","dateStarted":"2018-11-12T18:35:53+0000","dateFinished":"2018-11-12T18:35:53+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:36913"},{"text":"def needToWork(wd:WeekDay) = {\n    wd match {\n        case Sat => false\n        case _ => true\n    }\n}\n\nneedToWork(Sun)","user":"anonymous","dateUpdated":"2018-11-12T19:10:24+0000","config":{"colWidth":12,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true,"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1542047719177_17812176","id":"20181112-183519_1673924123","result":{"code":"SUCCESS","type":"TEXT","msg":"\nneedToWork: (wd: WeekDay)Boolean\n\nres4: Boolean = true\n"},"dateCreated":"2018-11-12T18:35:19+0000","dateStarted":"2018-11-12T19:10:24+0000","dateFinished":"2018-11-12T19:10:24+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:36914"},{"config":{"colWidth":12,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true,"editorMode":"ace/mode/markdown","editorHide":true,"tableHide":false},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1542049833962_957803524","id":"20181112-191033_548909876","dateCreated":"2018-11-12T19:10:33+0000","status":"FINISHED","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:38706","text":"%md\n## Bigger Example","user":"anonymous","dateUpdated":"2018-11-12T19:10:46+0000","dateFinished":"2018-11-12T19:10:46+0000","dateStarted":"2018-11-12T19:10:46+0000","result":{"code":"SUCCESS","type":"HTML","msg":"<div class=\"markdown-body\">\n<h2>Bigger Example</h2>\n</div>"}},{"text":"object SolarSystemPlanets {\n\n  sealed abstract class Planet(\n    val orderFromSun : Int,\n    val name         : String,\n    val mass         : Kilogram,\n    val radius       : Meter) extends Ordered[Planet] {\n\n      def compare(that: Planet) = this.orderFromSun - that.orderFromSun\n\n      lazy val surfaceGravity = G * mass / (radius * radius)\n\n      def surfaceWeight(otherMass: Kilogram) = otherMass * surfaceGravity\n\n      override def toString = name\n  }\n\n  case object MERCURY extends Planet(1, \"Mercury\", 3.303e+23, 2.4397e6)\n  case object VENUS   extends Planet(2, \"Venus\",   4.869e+24, 6.0518e6)\n  case object EARTH   extends Planet(3, \"Earth\",   5.976e+24, 6.3781e6)\n  case object MARS    extends Planet(4, \"Mars\",    6.421e+23, 3.3972e6)\n  case object JUPITER extends Planet(5, \"Jupiter\", 1.9e+27,   7.1492e7)\n  case object SATURN  extends Planet(6, \"Saturn\",  5.688e+26, 6.0268e7)\n  case object URANUS  extends Planet(7, \"Uranus\",  8.686e+25, 2.5559e7)\n  case object NEPTUNE extends Planet(8, \"Neptune\", 1.024e+26, 2.4746e7)\n\n  type Kilogram = Double\n  type Meter   = Double\n  private val G = 6.67300E-11 // universal gravitational constant  (m3 kg-1 s-2)\n}","user":"anonymous","dateUpdated":"2018-11-12T18:39:23+0000","config":{"colWidth":12,"editorMode":"ace/mode/scala","results":{},"enabled":true,"editorSetting":{"language":"scala","editOnDblClick":false},"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1542046560158_2070444269","id":"20180327-184143_1248793626","result":{"code":"SUCCESS","type":"TEXT","msg":"\ndefined object SolarSystemPlanets\n"},"dateCreated":"2018-11-12T18:16:00+0000","dateStarted":"2018-11-12T18:39:23+0000","dateFinished":"2018-11-12T18:39:24+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:36915"},{"text":"SolarSystemPlanets.EARTH.name","user":"anonymous","dateUpdated":"2018-11-12T18:50:22+0000","config":{"colWidth":12,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true,"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1542048006992_-579857752","id":"20181112-184006_109742450","result":{"code":"SUCCESS","type":"TEXT","msg":"\nres27: String = Earth\n"},"dateCreated":"2018-11-12T18:40:06+0000","dateStarted":"2018-11-12T18:50:22+0000","dateFinished":"2018-11-12T18:50:22+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:36916"},{"text":"SolarSystemPlanets.EARTH < SolarSystemPlanets.MARS","user":"anonymous","dateUpdated":"2018-11-12T18:39:26+0000","config":{"colWidth":12,"editorMode":"ace/mode/scala","results":{},"enabled":true,"editorSetting":{"language":"scala","editOnDblClick":false},"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1542046560158_2070444269","id":"20180327-184308_882718891","result":{"code":"SUCCESS","type":"TEXT","msg":"\nres15: Boolean = true\n"},"dateCreated":"2018-11-12T18:16:00+0000","dateStarted":"2018-11-12T18:39:26+0000","dateFinished":"2018-11-12T18:39:26+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:36917"},{"text":"","dateUpdated":"2018-11-12T18:16:13+0000","config":{"colWidth":12,"editorMode":"ace/mode/scala","results":{},"enabled":true,"editorSetting":{"language":"scala","editOnDblClick":false},"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1542046560159_2070059520","id":"20180327-184932_866290463","dateCreated":"2018-11-12T18:16:00+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:36918"}],"name":"Scala Introduction - Part X7 - Enumerations","id":"2DVP6854B","angularObjects":{"2DU4EM1QC:shared_process":[],"2DWH63KTX:shared_process":[],"2DTY3NN2K:shared_process":[],"2DTW2RFCG:shared_process":[],"2DUQAGCKJ:shared_process":[],"2DWWDB4VQ:shared_process":[],"2DV7ZN8WX:shared_process":[],"2DWF6XUFU:shared_process":[],"2DVE9GW7A:shared_process":[]},"config":{"looknfeel":"default"},"info":{}}
