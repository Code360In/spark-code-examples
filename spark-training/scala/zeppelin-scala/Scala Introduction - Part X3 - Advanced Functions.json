{"paragraphs":[{"text":"%md\n# 1 Parameter Lists\nAs opposed to many of the wide spread languages (Java, C++, Python), Scala handles parameter lists as an additional attribute of a function. This means that not all functions need to have a parameter list, or functions may have even multiple parameter lists.\n\nLet us discuss some examples","dateUpdated":"2018-11-12T18:14:41+0000","config":{"colWidth":12,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true,"editorMode":"ace/mode/markdown","editorHide":true,"tableHide":false},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1542046368719_158133322","id":"20181112-181248_1678718015","dateCreated":"2018-11-12T18:12:48+0000","status":"FINISHED","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:29313","user":"anonymous","dateFinished":"2018-11-12T18:14:41+0000","dateStarted":"2018-11-12T18:14:41+0000","result":{"code":"SUCCESS","type":"HTML","msg":"<div class=\"markdown-body\">\n<h1>1 Parameter Lists</h1>\n<p>As opposed to many of the wide spread languages (Java, C++, Python), Scala handles parameter lists as an additional attribute of a function. This means that not all functions need to have a parameter list, or functions may have even multiple parameter lists.</p>\n<p>Let us discuss some examples</p>\n</div>"}},{"text":"%md\n## 1.1 No Parameter Lists\nScala supports functions without parameter lists. This makes them almost indistinguishable from values - except that any logic is executed every time the function is invokes, while the value of a `val` is set once for ever.","dateUpdated":"2018-11-12T18:12:46+0000","config":{"tableHide":false,"editorSetting":{"language":"markdown","editOnDblClick":true},"colWidth":12,"editorMode":"ace/mode/markdown","editorHide":true,"results":{},"enabled":true,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1542045811987_-85748743","id":"20180409-170900_1704762601","dateCreated":"2018-11-12T18:03:31+0000","status":"FINISHED","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:28103","user":"anonymous","dateFinished":"2018-11-12T18:12:46+0000","dateStarted":"2018-11-12T18:12:46+0000","result":{"code":"SUCCESS","type":"HTML","msg":"<div class=\"markdown-body\">\n<h2>1.1 No Parameter Lists</h2>\n<p>Scala supports functions without parameter lists. This makes them almost indistinguishable from values - except that any logic is executed every time the function is invokes, while the value of a <code>val</code> is set once for ever.</p>\n</div>"}},{"text":"def fn : Int = {\n    println(\"fn executed\")\n    3\n}\n\nfn\nfn","dateUpdated":"2018-11-12T18:03:31+0000","config":{"colWidth":12,"editorMode":"ace/mode/scala","results":{},"enabled":true,"editorSetting":{"language":"scala","editOnDblClick":false},"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1542045811988_-87672488","id":"20180409-170833_1582717416","dateCreated":"2018-11-12T18:03:31+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:28104"},{"text":"val x = {\n    println(\"x assigned\")\n    7\n}\n\nx\nx","dateUpdated":"2018-11-12T18:03:31+0000","config":{"colWidth":12,"editorMode":"ace/mode/scala","results":{},"enabled":true,"editorSetting":{"language":"scala","editOnDblClick":false},"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1542045811988_-87672488","id":"20180409-171022_644298566","dateCreated":"2018-11-12T18:03:31+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:28105"},{"text":"%md\n## 1.2 Multiple Parameter Lists\n\nIn contrast to many other programming languages, Scala supports functions with multiple argument lists. This comes in handy for passing implicit values or multiple variable argument lists.","dateUpdated":"2018-11-12T18:12:39+0000","config":{"tableHide":false,"editorSetting":{"language":"markdown","editOnDblClick":true},"colWidth":12,"editorMode":"ace/mode/markdown","editorHide":true,"results":{},"enabled":true,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1542045811988_-87672488","id":"20180310-073213_9127006","dateCreated":"2018-11-12T18:03:31+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:28106","user":"anonymous","dateFinished":"2018-11-12T18:12:39+0000","dateStarted":"2018-11-12T18:12:39+0000","result":{"code":"SUCCESS","type":"HTML","msg":"<div class=\"markdown-body\">\n<h2>1.2 Multiple Parameter Lists</h2>\n<p>In contrast to many other programming languages, Scala supports functions with multiple argument lists. This comes in handy for passing implicit values or multiple variable argument lists.</p>\n</div>"}},{"text":"def fn(multiplier:Double)(value:Double) = multiplier * value\n\nfn(2.0)(3)","dateUpdated":"2018-11-12T18:03:31+0000","config":{"colWidth":12,"editorMode":"ace/mode/scala","results":{},"enabled":true,"editorSetting":{"language":"scala","editOnDblClick":false},"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1542045811989_-88057237","id":"20180310-073322_1697476332","dateCreated":"2018-11-12T18:03:31+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:28107"},{"text":"def fn(lefts:Double*)(rights:Double*) = {\n    for (l <- lefts; r <- rights)\n        yield l*r\n}\n\nprintln(fn(1,2,3)(3,4,5).mkString(\",\"))","dateUpdated":"2018-11-12T18:03:31+0000","config":{"colWidth":12,"editorMode":"ace/mode/scala","results":{},"enabled":true,"editorSetting":{"language":"scala","editOnDblClick":false},"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1542045811989_-88057237","id":"20180310-073334_1507155766","dateCreated":"2018-11-12T18:03:31+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:28108"},{"text":"%md\n### Using multiple Parameter Lists with Function Parameters\n\nHaving multiple parameter list can be especially useful if the last list is a function. In this case the function can be specified inline in a natural way using curly braces.","dateUpdated":"2018-11-12T18:03:42+0000","config":{"tableHide":false,"editorSetting":{"language":"markdown","editOnDblClick":true},"colWidth":12,"editorMode":"ace/mode/markdown","editorHide":true,"results":{},"enabled":true,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1542045811989_-88057237","id":"20180409-095944_1633818158","dateCreated":"2018-11-12T18:03:31+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:28109","user":"anonymous","dateFinished":"2018-11-12T18:03:42+0000","dateStarted":"2018-11-12T18:03:42+0000","result":{"code":"SUCCESS","type":"HTML","msg":"<div class=\"markdown-body\">\n<h3>Using multiple Parameter Lists with Function Parameters</h3>\n<p>Having multiple parameter list can be especially useful if the last list is a function. In this case the function can be specified inline in a natural way using curly braces.</p>\n</div>"}},{"text":"def repeat(n:Int)(fn: => Unit) = {\n    (1 to n).foreach(_ => fn)\n}\n\nrepeat(3) { println(\"Hello World\") }","dateUpdated":"2018-11-12T18:03:31+0000","config":{"colWidth":12,"editorMode":"ace/mode/scala","results":{},"enabled":true,"editorSetting":{"language":"scala","editOnDblClick":false},"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1542045811989_-88057237","id":"20180409-100009_1900003922","dateCreated":"2018-11-12T18:03:31+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:28110"},{"text":"%md\n## 1.3 Currying\n\nAnother technique which is well-known in the functional world is *Currying*. This binds a subset of function parameters with arguments while leaving other parameters unbound. This creates a new function with less parameters.","dateUpdated":"2018-11-12T18:15:03+0000","config":{"tableHide":false,"editorSetting":{"language":"markdown","editOnDblClick":true},"colWidth":12,"editorMode":"ace/mode/markdown","editorHide":true,"results":{},"enabled":true,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1542045811990_-86902990","id":"20180310-073529_675855962","dateCreated":"2018-11-12T18:03:31+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:28111","user":"anonymous","dateFinished":"2018-11-12T18:15:03+0000","dateStarted":"2018-11-12T18:15:03+0000","result":{"code":"SUCCESS","type":"HTML","msg":"<div class=\"markdown-body\">\n<h2>1.3 Currying</h2>\n<p>Another technique which is well-known in the functional world is <em>Currying</em>. This binds a subset of function parameters with arguments while leaving other parameters unbound. This creates a new function with less parameters.</p>\n</div>"}},{"text":"def multiply(a:Double)(b:Double) = a*b\nval twice = multiply(2.0)(_)\n\ntwice(3)","dateUpdated":"2018-11-12T18:03:31+0000","config":{"colWidth":12,"editorMode":"ace/mode/scala","results":{},"enabled":true,"editorSetting":{"language":"scala","editOnDblClick":false},"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1542045811990_-86902990","id":"20180310-073811_661052233","dateCreated":"2018-11-12T18:03:31+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:28112"},{"text":"%md\n# 2 Higher Order Functions\n\nWith Currying we created a new function from an existing one. This concept can be generalized, such that we can actually create a function which transforms other functions. These are called *higher order functions*.","dateUpdated":"2018-11-12T18:15:09+0000","config":{"tableHide":false,"editorSetting":{"language":"markdown","editOnDblClick":true},"colWidth":12,"editorMode":"ace/mode/markdown","editorHide":true,"results":{},"enabled":true,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1542045811990_-86902990","id":"20180310-073850_1360927367","dateCreated":"2018-11-12T18:03:31+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:28113","user":"anonymous","dateFinished":"2018-11-12T18:15:09+0000","dateStarted":"2018-11-12T18:15:09+0000","result":{"code":"SUCCESS","type":"HTML","msg":"<div class=\"markdown-body\">\n<h1>2 Higher Order Functions</h1>\n<p>With Currying we created a new function from an existing one. This concept can be generalized, such that we can actually create a function which transforms other functions. These are called <em>higher order functions</em>.</p>\n</div>"}},{"text":"def applyDecorator[X](f: X => Int, decorate:Int => String) = {\n    x:X => decorate(f(x))\n}\n\nval calculator = applyDecorator((n:Int) => 2*n, \"[\" + _ + \"]\")\nprintln(calculator(23))","dateUpdated":"2018-11-12T18:03:31+0000","config":{"colWidth":12,"editorMode":"ace/mode/scala","results":{},"enabled":true,"editorSetting":{"language":"scala","editOnDblClick":false},"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1542045811991_-87287739","id":"20180310-074155_1152412662","dateCreated":"2018-11-12T18:03:31+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:28114"},{"text":"val meter = applyDecorator((s:String) => s.length, \"[\" + _ + \"]\")\nprintln(meter(\"Hello World\"))","dateUpdated":"2018-11-12T18:03:31+0000","config":{"colWidth":12,"editorMode":"ace/mode/scala","results":{},"enabled":true,"editorSetting":{"language":"scala","editOnDblClick":false},"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1542045811991_-87287739","id":"20180310-074210_1927633397","dateCreated":"2018-11-12T18:03:31+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:28115"},{"dateUpdated":"2018-11-12T18:03:45+0000","config":{"colWidth":12,"editorMode":"ace/mode/scala","results":{},"enabled":true,"editorSetting":{"language":"scala","editOnDblClick":false},"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1542045811991_-87287739","id":"20180310-074228_249256564","dateCreated":"2018-11-12T18:03:31+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:28116","text":""}],"name":"Scala Introduction - Part X3 - Advanced Functions","id":"2DUWUXTNR","angularObjects":{"2DU4EM1QC:shared_process":[],"2DWH63KTX:shared_process":[],"2DTY3NN2K:shared_process":[],"2DTW2RFCG:shared_process":[],"2DUQAGCKJ:shared_process":[],"2DWWDB4VQ:shared_process":[],"2DV7ZN8WX:shared_process":[],"2DWF6XUFU:shared_process":[],"2DVE9GW7A:shared_process":[]},"config":{"looknfeel":"default"},"info":{}}
